# üìÖ Day 49: Task S-3 ‚Äì Allocate Controls (System-Specific vs. Common)  
_100 Days of GRC ‚Äì by Ibrahim Abdullahi_  

---

##  What We‚Äôre Doing Today:

In today‚Äôs post, I‚Äôm diving deep into an absolutely critical concept in cloud-based GRC work ‚Äî **allocating controls** between system-specific and common.  

This task ensures we define exactly **who is responsible** for which parts of security in our OpenMRS on AWS system. Without this clarity, it is dangerously easy for gaps or duplicate efforts to occur ‚Äî which I‚Äôve seen in real environments!

---

##  Why This Matters (Leadership Perspective):

In large organizations or cloud deployments like AWS, security controls are distributed:  

 Some controls are **inherited** from the cloud provider (AWS), or from Corporate IT (common controls)  
 Others must be **implemented by the system owner** (OpenMRS team, app developers, security engineers)  

A big part of maturing a GRC program is building this clarity. It directly supports:  

- **Audit readiness**  
- **Streamlined implementation**  
- **Avoiding control overlap or ownership gaps**  
- **Accountability** (who does what, and when)  

---

##  Core Concept: System-Specific vs. Common Controls

| Type of Control        | What It Means                           |
|------------------------|-----------------------------------------|
| **System-Specific**    | Implemented just for our OpenMRS system. Owned by the system team. Customized. |
| **Common (Inherited)** | Provided by AWS or corporate. Inherited via contracts, attestations, policies. Applied org-wide. |

###  Why allocate?

If you do not explicitly allocate:  

 Controls can get missed  
 Two teams might redundantly implement the same thing  
 Audit evidence will be unclear  
 Allocation enables efficient, trusted GRC work.

---

##  OpenMRS on AWS ‚Äì Real Example

Here‚Äôs how I‚Äôd personally approach this (showcasing my own knowledge):

| Type of Control        | Control Example                                                | Reason & Ownership |
|------------------------|---------------------------------------------------------------|--------------------|
| **Common**             | PE family: Physical Access Control (PE-2, PE-3, etc.)          | Handled by AWS ‚Äî we inherit via SOC 2, ISO 27001. AWS operates secure data centers ‚Äî we verify via BAA and AWS compliance docs. |
| **System-Specific**    | AC-2: User Account Management (OpenMRS user roles & auth)      | Our team configures OpenMRS roles, MFA, unique IDs, permissions ‚Äî AWS does not manage OpenMRS users. |
| **Common**             | MA-2: Controlled Maintenance of physical servers              | AWS owns and maintains physical hardware ‚Äî inherited control. We focus only on app-level patches (system-specific). |
| **System-Specific**    | SC-12: Cryptographic Key Management (for OpenMRS DB encryption) | Our team selects encryption settings, manages keys (even though AWS KMS helps) ‚Äî responsibility remains with us for key mgmt. |

---

##  How I Teach It to Others:

**Common mistake**: ‚ÄúOh, AWS handles security!‚Äù  
**Correction**: No ‚Äî **AWS handles OF the cloud**; **we handle IN the cloud**.

AWS‚Äôs **Shared Responsibility Model** is key here:  

| AWS Responsibilities             | Our Responsibilities in OpenMRS  |
|----------------------------------|----------------------------------|
| Data center physical security    | Application role & user controls |
| Hypervisor & network infrastructure | Patching OpenMRS code, dependencies |
| Managed service (RDS storage encryption, etc.) | How we configure access, manage PHI, implement policies |

---

##  Practical Example from My Experience:

In a recent cloud GRC project I led ‚Äî allocating these controls early in the SSP phase saved *hundreds of staff-hours*.  

- DevOps wasn‚Äôt duplicating controls already handled by AWS  
- Auditors had clear mappings to AWS SOC 2 controls  
- Our app team focused effort on true system-specific controls (user auth, encryption choices, app security logging)  

Lesson: **Ownership clarity ‚Üí audit success ‚Üí real risk reduction**.

---

##  Hands-On (My Example):

**Common Control:**  
`PE-3: Physical access control` ‚Äî inherited from AWS via SOC 2. We obtain the SOC reports quarterly for evidence.

**System-Specific Control:**  
`AC-2: Account management in OpenMRS` ‚Äî implemented by our team:  
 Unique user IDs  
 Enforced MFA  
 Role-based permissions  
 Periodic review

---

##  Reflection (Leadership Take):

Do I trust AWS to handle their common controls? Mostly ‚Äî but we **verify**:  

 Review AWS compliance reports (SOC 2 Type II, ISO 27001)  
 Conduct contract reviews (BAA with AWS)  
 Maintain our own mappings in the SSP and POA&M

Never simply ‚Äúassume.‚Äù In GRC leadership, **assumptions are risk**. I teach my teams to follow this rule:

**‚ÄúInherit with evidence, not blind faith.‚Äù**

---

## üìù Summary:

**Key takeaway from Day 49:**  

A mature GRC program clearly defines:  

 What is system-specific (owned & implemented by us)  
 What is inherited/common (owned elsewhere ‚Äî with documented verification)  

For OpenMRS on AWS ‚Äî this step means:  

- We avoid duplicating effort  
- We ensure nothing critical is missed  
- We‚Äôre fully prepared for external audit and internal review  
- Our risk owners (senior leadership) can trust that controls are in place and effective.

---

##  Tomorrow‚Äôs Focus:

We‚Äôll now start documenting this control set into our **System Security Plan (SSP)** ‚Äî a crucial step toward operationalizing the GRC program for OpenMRS on AWS.

---

##  Suggested Search Terms:

- "Common controls vs system-specific controls"  
- "AWS shared responsibility model examples"  
- "Inherited controls cloud security"  
- "SSP documenting inherited controls"  






